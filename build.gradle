import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.DocumentBuilderFactory

plugins {
    id "org.springframework.boot" version "3.3.0"
    id "io.spring.dependency-management" version "1.1.5"
    id 'java'
    id 'base'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = '17'
}

dependencies {
    implementation libs.org.springframework.boot.spring.boot.starter.web
    implementation libs.org.springframework.boot.spring.boot.starter.data.jpa
    implementation libs.org.projectlombok.lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    implementation libs.org.springframework.boot.spring.boot.starter.security
    implementation libs.com.google.code.gson.gson
    implementation libs.org.springframework.boot.spring.boot.starter.validation
    implementation libs.io.jsonwebtoken.jjwt
    implementation libs.javax.xml.bind.jaxb.api
    implementation libs.org.springdoc.springdoc.openapi.starter.webmvc.ui
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    runtimeOnly libs.org.postgresql.postgresql
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.21.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.0'
}

group = 'com.example'
version = project.projectVersion
description = 'becoder-api'

def envProps = new Properties()
file("gradle.properties").withInputStream { inputStream ->
    envProps.load(inputStream)
}

def diffFiles = []
def properties = new Properties()
file('gradle.properties').withInputStream { properties.load(it) }
diffFiles = properties.getProperty('diffFiles')?.split(',') ?: []

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': project.findProperty('mainClass')
        )
    }
}

tasks.register('compile', JavaCompile) {
    description = 'Compiles the Java source files.'
    group = 'build'

    source = fileTree('src/main/java')
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file('build/classes')
    options.encoding = 'UTF-8'
    options.sourcepath = sourceSets.main.java.getSourceDirectories()
    options.annotationProcessorPath = sourceSets.main.compileClasspath
}

tasks.named('compileTestJava') {
    dependsOn compile
}

tasks.named('resolveMainClassName') {
    dependsOn compile
}

tasks.named('jar') {
    dependsOn compile
}

tasks.register('buildJar', Jar) {
    dependsOn compile
    archiveBaseName.set(project.findProperty('projectName').toString())
    archiveVersion.set(project.findProperty('projectVersion').toString())
    with jar
}

tasks.named('build') {
    dependsOn compile, buildJar
}

tasks.register('testReact', Exec) {
    workingDir 'frontend'
    inputs.dir 'frontend'
    commandLine 'cmd', '/c', 'npm run test'
}

test {
    dependsOn testReact
    useJUnitPlatform()
}


tasks.register('xml') {
    description = 'Checks if all .xml files are formatted correctly.'
    group = 'verification'
    doLast {
        def xmlFiles = fileTree(dir: '.', include: '**/*.xml')
        xmlFiles.each { File xmlFile ->
            try {
                def factory = DocumentBuilderFactory.newInstance()
                factory.setValidating(true)
                def builder = factory.newDocumentBuilder()
                builder.setErrorHandler(new DefaultHandler())
                builder.parse(xmlFile)
            } catch (Exception e) {
                println "Invalid: ${xmlFile} - ${e.message}"
                throw e
            }
        }
    }
}

tasks.named('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

tasks.register('scp') {
    description = 'Moves built artifact to the server defined in properties file'
    group = 'application'

    dependsOn build
    doLast {
        def jarFile = file("$layout.buildDirectory/libs/${project.name}-${version}.jar")
        def scpUser = project.findProperty('scpUser') ?: 'username'
        def scpHost = project.findProperty('scpHost') ?: 'example.com'
        def scpDestDir = project.findProperty('scpDestDir') ?: '/'

        exec {
            commandLine 'scp', '-P 2222', jarFile,  "${scpUser}@${scpHost}:${scpDestDir}/${project.name}-${version}.jar"
        }
    }
}

tasks.register('generateChecksums', Copy) {
    dependsOn build
    from(tasks.jar.outputs.files)
    into("build/libs")
    doLast {
        def jarFile = file("build/libs/${project.name}-${version}.jar")
        def md5File = file("build/libs/${project.name}-${version}.jar.md5")
        def sha1File = file("build/libs/${project.name}-${version}.jar.sha1")

        md5File.text = jarFile.bytes.encodeHex().toString()
        sha1File.text = jarFile.bytes.digest('SHA-1').toString()
    }
}

tasks.register('generateJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("build/docs/javadoc")
    options.encoding = 'UTF-8'
}

tasks.register('doc') {
    description = 'Generates Javadoc and adds M5 + SHA-1 checksums.'
    group = 'documentation'
    dependsOn generateChecksums, generateJavadoc
    doLast {
        def jarFile = file("build/libs/${project.name}-${version}.jar")
        def md5File = file("build/libs/${project.name}-${version}.jar.md5")
        def sha1File = file("build/libs/${project.name}-${version}.jar.sha1")
        def javadocDir = file("build/docs/javadoc")

        jar {
            from md5File
            from sha1File
            from javadocDir
        }

        jar {
            manifest {
                attributes(
                        'MD5-Checksum': md5File.text,
                        'SHA1-Checksum': sha1File.text
                )
            }
        }
    }
}

tasks.register('music') {
    description = 'Play sound after success build.'
    group = 'application'

    dependsOn build
    doLast {
        def musicFile = 'build.mp3'
        exec {
            commandLine 'cmd', '/c', 'start', musicFile
        }
    }
}

tasks.register('env') {
    description = 'Starts application with environment defined in properties file.'
    group = 'application'
    dependsOn build

    def javaVersion = envProps.getProperty('javaVersion')

    java {
        sourceCompatibility = javaVersion

        toolchain {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        }
    }

    doLast {
        def jvmArgs = envProps.getProperty('jvmArgs')

        exec {
            commandLine 'java', '-jar', "build/libs/${project.name}-${version}.jar", jvmArgs.tokenize()
        }
    }
}

tasks.register('team', Zip) {
    description = 'Collects 4 last version artifacts into zip'
    group = 'build'
    dependsOn build
    doLast {
        def commits = 'git log --format="%H" -n 4'.execute().text.tokenize('\n')

        commits.each { commit ->
            'git checkout $commit'.execute()
            from '.'
        }

        into 'team-builds'
        archiveFileName = 'team-builds.zip'
    }
}

tasks.register('diff') {
    description = 'Creates commit if files from properties have changed'
    group = 'version'
    doLast {
        def status = 'git status --porcelain'.execute().text

        def changesDetected = diffFiles.any { status.contains(it)}

        if (changesDetected) {
            def p = 'git add .'.execute()
            p.waitFor()
            'git commit -m "Changes detected in files specified in gradle.properties"'.execute()
        }
    }
}

